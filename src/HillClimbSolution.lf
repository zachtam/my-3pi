/**
 * Display the outputs from the line sensors on the
 * <a href="https://www.pololu.com/docs/0J86">Pololu 3pi+ 2040 robot</a>.
 * This program spends the first 10 seconds in calibration mode, during which
 * you should move the robot over the light and dark areas that you would like
 * it to detect.  It then switches into measurement mode and displays the
 * measured reflectance of the five IR sensors.
 *
 * @author Abhi Gundrala
 * @author Edward A. Lee
 */
 target C {
    platform: {
      name: "rp2040",
      board: "pololu_3pi_2040_robot"
    },
    threading: false,
  }
  
  import Tilt from "lib/Tilt.lf"
  import Display from "lib/Display.lf"
  import MotorsWithFeedback from "lib/MotorsWithFeedback.lf"
  import Encoders from "lib/Encoders.lf"
  
  preamble {=  
    #define DRIVE_SPEED 0.2f
  =}
  
  main reactor(sample_period: time = 100 ms) {
    tilt = new Tilt()
    disp = new Display()
    motors = new MotorsWithFeedback()
    encoders = new Encoders()
    timer t(0, sample_period)
    state drive_mode: int = 0
    logical action stop_turning
    // Timer used to display seconds.

    encoders.left -> motors.left;
    encoders.right -> motors.right;

    reaction(t) -> encoders.trigger {=
        lf_set(encoders.trigger, true);
    =}
  
    reaction(tilt.roll) -> motors.left_speed, motors.right_speed {=
        if (self->drive_mode == 0) {
            static float K = 0.01;
            float error = 0 - tilt.roll->value;

            lf_set(motors.left_speed, DRIVE_SPEED - K*error);
            lf_set(motors.right_speed, DRIVE_SPEED + K*error);
        }
        if (self->drive_mode == 2) {
            static float K = 0.01;
            float error = 0 - tilt.roll->value;

            lf_set(motors.left_speed, DRIVE_SPEED + K*error);
            lf_set(motors.right_speed, DRIVE_SPEED - K*error);
        }
    =}

    reaction(tilt.pitch, tilt.roll) -> motors.left_speed, motors.right_speed, stop_turning, disp.line0, disp.line1 {=
        static char buf0[17];
        static char buf1[17];
        snprintf(buf0, 17, "pitch:%2.4f", tilt.pitch->value);
        snprintf(buf1, 17, "roll:%2.4f", tilt.roll->value);
        if (tilt.pitch->value < 5 && tilt.roll->value < 10 && tilt.roll->value > -10 && self->drive_mode == 0) {
            self->drive_mode = 1;
            lf_set(motors.left_speed, 0.12f);
            lf_set(motors.right_speed, -0.1f);
            lf_schedule(stop_turning, SEC(1.21));
        }
        lf_set(disp.line0, buf0);
        lf_set(disp.line1, buf1);
    =}

    reaction(stop_turning) {=
        self->drive_mode = 2;
    =}
  }
  